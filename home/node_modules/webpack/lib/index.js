/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");
const memoize = require("webpack/lib/util/memoize");

/** @typedef {import("webpack/declarations/WebpackOptions").Entry} Entry */
/** @typedef {import("webpack/declarations/WebpackOptions").EntryNormalized} EntryNormalized */
/** @typedef {import("webpack/declarations/WebpackOptions").EntryObject} EntryObject */
/** @typedef {import("webpack/declarations/WebpackOptions").LibraryOptions} LibraryOptions */
/** @typedef {import("webpack/declarations/WebpackOptions").ModuleOptions} ModuleOptions */
/** @typedef {import("webpack/declarations/WebpackOptions").ResolveOptions} ResolveOptions */
/** @typedef {import("webpack/declarations/WebpackOptions").RuleSetCondition} RuleSetCondition */
/** @typedef {import("webpack/declarations/WebpackOptions").RuleSetConditionAbsolute} RuleSetConditionAbsolute */
/** @typedef {import("webpack/declarations/WebpackOptions").RuleSetRule} RuleSetRule */
/** @typedef {import("webpack/declarations/WebpackOptions").RuleSetUse} RuleSetUse */
/** @typedef {import("webpack/declarations/WebpackOptions").RuleSetUseItem} RuleSetUseItem */
/** @typedef {import("webpack/declarations/WebpackOptions").WebpackOptions} Configuration */
/** @typedef {import("webpack/declarations/WebpackOptions").WebpackOptionsNormalized} WebpackOptionsNormalized */
/** @typedef {import("webpack/declarations/WebpackOptions").WebpackPluginFunction} WebpackPluginFunction */
/** @typedef {import("webpack/declarations/WebpackOptions").WebpackPluginInstance} WebpackPluginInstance */
/** @typedef {import("webpack/lib/Compilation").Asset} Asset */
/** @typedef {import("webpack/lib/Compilation").AssetInfo} AssetInfo */
/** @typedef {import("webpack/lib/MultiStats")} MultiStats */
/** @typedef {import("webpack/lib/Parser").ParserState} ParserState */
/** @typedef {import("webpack/lib/Watching")} Watching */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsAsset} StatsAsset */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsChunk} StatsChunk */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsChunkGroup} StatsChunkGroup */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsChunkOrigin} StatsChunkOrigin */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsCompilation} StatsCompilation */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsError} StatsError */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsLogging} StatsLogging */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsLoggingEntry} StatsLoggingEntry */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsModule} StatsModule */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsModuleIssuer} StatsModuleIssuer */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsModuleReason} StatsModuleReason */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsModuleTraceDependency} StatsModuleTraceDependency */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsModuleTraceItem} StatsModuleTraceItem */
/** @typedef {import("webpack/lib/stats/DefaultStatsFactoryPlugin").StatsProfile} StatsProfile */

/**
 * @template {Function} T
 * @param {function(): T} factory factory function
 * @returns {T} function
 */
const lazyFunction = factory => {
	const fac = memoize(factory);
	const f = /** @type {any} */ ((...args) => {
		return fac()(...args);
	});
	return /** @type {T} */ (f);
};

/**
 * @template A
 * @template B
 * @param {A} obj input a
 * @param {B} exports input b
 * @returns {A & B} merged
 */
const mergeExports = (obj, exports) => {
	const descriptors = Object.getOwnPropertyDescriptors(exports);
	for (const name of Object.keys(descriptors)) {
		const descriptor = descriptors[name];
		if (descriptor.get) {
			const fn = descriptor.get;
			Object.defineProperty(obj, name, {
				configurable: false,
				enumerable: true,
				get: memoize(fn)
			});
		} else if (typeof descriptor.value === "object") {
			Object.defineProperty(obj, name, {
				configurable: false,
				enumerable: true,
				writable: false,
				value: mergeExports({}, descriptor.value)
			});
		} else {
			throw new Error(
				"Exposed values must be either a getter or an nested object"
			);
		}
	}
	return /** @type {A & B} */ (Object.freeze(obj));
};

const fn = lazyFunction(() => require("webpack/lib/webpack"));
module.exports = mergeExports(fn, {
	get webpack() {
		return require("webpack/lib/webpack");
	},
	get validate() {
		const validateSchema = require("webpack/lib/validateSchema");
		const webpackOptionsSchema = require("webpack/schemas/WebpackOptions");
		return options => validateSchema(webpackOptionsSchema, options);
	},
	get validateSchema() {
		const validateSchema = require("webpack/lib/validateSchema");
		return validateSchema;
	},
	get version() {
		return /** @type {string} */ (require("webpack/package.json").version);
	},

	get cli() {
		return require("webpack/lib/cli");
	},
	get AutomaticPrefetchPlugin() {
		return require("webpack/lib/AutomaticPrefetchPlugin");
	},
	get AsyncDependenciesBlock() {
		return require("webpack/lib/AsyncDependenciesBlock");
	},
	get BannerPlugin() {
		return require("webpack/lib/BannerPlugin");
	},
	get Cache() {
		return require("webpack/lib/Cache");
	},
	get Chunk() {
		return require("webpack/lib/Chunk");
	},
	get ChunkGraph() {
		return require("webpack/lib/ChunkGraph");
	},
	get CleanPlugin() {
		return require("webpack/lib/CleanPlugin");
	},
	get Compilation() {
		return require("webpack/lib/Compilation");
	},
	get Compiler() {
		return require("webpack/lib/Compiler");
	},
	get ConcatenationScope() {
		return require("webpack/lib/ConcatenationScope");
	},
	get ContextExclusionPlugin() {
		return require("webpack/lib/ContextExclusionPlugin");
	},
	get ContextReplacementPlugin() {
		return require("webpack/lib/ContextReplacementPlugin");
	},
	get DefinePlugin() {
		return require("webpack/lib/DefinePlugin");
	},
	get DelegatedPlugin() {
		return require("webpack/lib/DelegatedPlugin");
	},
	get Dependency() {
		return require("webpack/lib/Dependency");
	},
	get DllPlugin() {
		return require("webpack/lib/DllPlugin");
	},
	get DllReferencePlugin() {
		return require("webpack/lib/DllReferencePlugin");
	},
	get DynamicEntryPlugin() {
		return require("webpack/lib/DynamicEntryPlugin");
	},
	get EntryOptionPlugin() {
		return require("webpack/lib/EntryOptionPlugin");
	},
	get EntryPlugin() {
		return require("webpack/lib/EntryPlugin");
	},
	get EnvironmentPlugin() {
		return require("webpack/lib/EnvironmentPlugin");
	},
	get EvalDevToolModulePlugin() {
		return require("webpack/lib/EvalDevToolModulePlugin");
	},
	get EvalSourceMapDevToolPlugin() {
		return require("webpack/lib/EvalSourceMapDevToolPlugin");
	},
	get ExternalModule() {
		return require("webpack/lib/ExternalModule");
	},
	get ExternalsPlugin() {
		return require("webpack/lib/ExternalsPlugin");
	},
	get Generator() {
		return require("webpack/lib/Generator");
	},
	get HotUpdateChunk() {
		return require("webpack/lib/HotUpdateChunk");
	},
	get HotModuleReplacementPlugin() {
		return require("webpack/lib/HotModuleReplacementPlugin");
	},
	get IgnorePlugin() {
		return require("webpack/lib/IgnorePlugin");
	},
	get JavascriptModulesPlugin() {
		return util.deprecate(
			() => require("webpack/lib/javascript/JavascriptModulesPlugin"),
			"webpack.JavascriptModulesPlugin has moved to webpack.javascript.JavascriptModulesPlugin",
			"DEP_WEBPACK_JAVASCRIPT_MODULES_PLUGIN"
		)();
	},
	get LibManifestPlugin() {
		return require("webpack/lib/LibManifestPlugin");
	},
	get LibraryTemplatePlugin() {
		return util.deprecate(
			() => require("webpack/lib/LibraryTemplatePlugin"),
			"webpack.LibraryTemplatePlugin is deprecated and has been replaced by compilation.outputOptions.library or compilation.addEntry + passing a library option",
			"DEP_WEBPACK_LIBRARY_TEMPLATE_PLUGIN"
		)();
	},
	get LoaderOptionsPlugin() {
		return require("webpack/lib/LoaderOptionsPlugin");
	},
	get LoaderTargetPlugin() {
		return require("webpack/lib/LoaderTargetPlugin");
	},
	get Module() {
		return require("webpack/lib/Module");
	},
	get ModuleFilenameHelpers() {
		return require("webpack/lib/ModuleFilenameHelpers");
	},
	get ModuleGraph() {
		return require("webpack/lib/ModuleGraph");
	},
	get ModuleGraphConnection() {
		return require("webpack/lib/ModuleGraphConnection");
	},
	get NoEmitOnErrorsPlugin() {
		return require("webpack/lib/NoEmitOnErrorsPlugin");
	},
	get NormalModule() {
		return require("webpack/lib/NormalModule");
	},
	get NormalModuleReplacementPlugin() {
		return require("webpack/lib/NormalModuleReplacementPlugin");
	},
	get MultiCompiler() {
		return require("webpack/lib/MultiCompiler");
	},
	get Parser() {
		return require("webpack/lib/Parser");
	},
	get PrefetchPlugin() {
		return require("webpack/lib/PrefetchPlugin");
	},
	get ProgressPlugin() {
		return require("webpack/lib/ProgressPlugin");
	},
	get ProvidePlugin() {
		return require("webpack/lib/ProvidePlugin");
	},
	get RuntimeGlobals() {
		return require("webpack/lib/RuntimeGlobals");
	},
	get RuntimeModule() {
		return require("webpack/lib/RuntimeModule");
	},
	get SingleEntryPlugin() {
		return util.deprecate(
			() => require("webpack/lib/EntryPlugin"),
			"SingleEntryPlugin was renamed to EntryPlugin",
			"DEP_WEBPACK_SINGLE_ENTRY_PLUGIN"
		)();
	},
	get SourceMapDevToolPlugin() {
		return require("webpack/lib/SourceMapDevToolPlugin");
	},
	get Stats() {
		return require("webpack/lib/Stats");
	},
	get Template() {
		return require("webpack/lib/Template");
	},
	get UsageState() {
		return require("webpack/lib/ExportsInfo").UsageState;
	},
	get WatchIgnorePlugin() {
		return require("webpack/lib/WatchIgnorePlugin");
	},
	get WebpackError() {
		return require("webpack/lib/WebpackError");
	},
	get WebpackOptionsApply() {
		return require("webpack/lib/WebpackOptionsApply");
	},
	get WebpackOptionsDefaulter() {
		return util.deprecate(
			() => require("webpack/lib/WebpackOptionsDefaulter"),
			"webpack.WebpackOptionsDefaulter is deprecated and has been replaced by webpack.config.getNormalizedWebpackOptions and webpack.config.applyWebpackOptionsDefaults",
			"DEP_WEBPACK_OPTIONS_DEFAULTER"
		)();
	},
	// TODO webpack 6 deprecate
	get WebpackOptionsValidationError() {
		return require("schema-utils").ValidationError;
	},
	get ValidationError() {
		return require("schema-utils").ValidationError;
	},

	cache: {
		get MemoryCachePlugin() {
			return require("webpack/lib/cache/MemoryCachePlugin");
		}
	},

	config: {
		get getNormalizedWebpackOptions() {
			return require("webpack/lib/config/normalization").getNormalizedWebpackOptions;
		},
		get applyWebpackOptionsDefaults() {
			return require("webpack/lib/config/defaults").applyWebpackOptionsDefaults;
		}
	},

	dependencies: {
		get ModuleDependency() {
			return require("webpack/lib/dependencies/ModuleDependency");
		},
		get ConstDependency() {
			return require("webpack/lib/dependencies/ConstDependency");
		},
		get NullDependency() {
			return require("webpack/lib/dependencies/NullDependency");
		}
	},

	ids: {
		get ChunkModuleIdRangePlugin() {
			return require("webpack/lib/ids/ChunkModuleIdRangePlugin");
		},
		get NaturalModuleIdsPlugin() {
			return require("webpack/lib/ids/NaturalModuleIdsPlugin");
		},
		get OccurrenceModuleIdsPlugin() {
			return require("webpack/lib/ids/OccurrenceModuleIdsPlugin");
		},
		get NamedModuleIdsPlugin() {
			return require("webpack/lib/ids/NamedModuleIdsPlugin");
		},
		get DeterministicChunkIdsPlugin() {
			return require("webpack/lib/ids/DeterministicChunkIdsPlugin");
		},
		get DeterministicModuleIdsPlugin() {
			return require("webpack/lib/ids/DeterministicModuleIdsPlugin");
		},
		get NamedChunkIdsPlugin() {
			return require("webpack/lib/ids/NamedChunkIdsPlugin");
		},
		get OccurrenceChunkIdsPlugin() {
			return require("webpack/lib/ids/OccurrenceChunkIdsPlugin");
		},
		get HashedModuleIdsPlugin() {
			return require("webpack/lib/ids/HashedModuleIdsPlugin");
		}
	},

	javascript: {
		get EnableChunkLoadingPlugin() {
			return require("webpack/lib/javascript/EnableChunkLoadingPlugin");
		},
		get JavascriptModulesPlugin() {
			return require("webpack/lib/javascript/JavascriptModulesPlugin");
		},
		get JavascriptParser() {
			return require("webpack/lib/javascript/JavascriptParser");
		}
	},

	optimize: {
		get AggressiveMergingPlugin() {
			return require("webpack/lib/optimize/AggressiveMergingPlugin");
		},
		get AggressiveSplittingPlugin() {
			return util.deprecate(
				() => require("webpack/lib/optimize/AggressiveSplittingPlugin"),
				"AggressiveSplittingPlugin is deprecated in favor of SplitChunksPlugin",
				"DEP_WEBPACK_AGGRESSIVE_SPLITTING_PLUGIN"
			)();
		},
		get LimitChunkCountPlugin() {
			return require("webpack/lib/optimize/LimitChunkCountPlugin");
		},
		get MinChunkSizePlugin() {
			return require("webpack/lib/optimize/MinChunkSizePlugin");
		},
		get ModuleConcatenationPlugin() {
			return require("webpack/lib/optimize/ModuleConcatenationPlugin");
		},
		get RealContentHashPlugin() {
			return require("webpack/lib/optimize/RealContentHashPlugin");
		},
		get RuntimeChunkPlugin() {
			return require("webpack/lib/optimize/RuntimeChunkPlugin");
		},
		get SideEffectsFlagPlugin() {
			return require("webpack/lib/optimize/SideEffectsFlagPlugin");
		},
		get SplitChunksPlugin() {
			return require("webpack/lib/optimize/SplitChunksPlugin");
		}
	},

	runtime: {
		get GetChunkFilenameRuntimeModule() {
			return require("webpack/lib/runtime/GetChunkFilenameRuntimeModule");
		},
		get LoadScriptRuntimeModule() {
			return require("webpack/lib/runtime/LoadScriptRuntimeModule");
		}
	},

	prefetch: {
		get ChunkPrefetchPreloadPlugin() {
			return require("webpack/lib/prefetch/ChunkPrefetchPreloadPlugin");
		}
	},

	web: {
		get FetchCompileAsyncWasmPlugin() {
			return require("webpack/lib/web/FetchCompileAsyncWasmPlugin");
		},
		get FetchCompileWasmPlugin() {
			return require("webpack/lib/web/FetchCompileWasmPlugin");
		},
		get JsonpChunkLoadingRuntimeModule() {
			return require("webpack/lib/web/JsonpChunkLoadingRuntimeModule");
		},
		get JsonpTemplatePlugin() {
			return require("webpack/lib/web/JsonpTemplatePlugin");
		}
	},

	webworker: {
		get WebWorkerTemplatePlugin() {
			return require("webpack/lib/webworker/WebWorkerTemplatePlugin");
		}
	},

	node: {
		get NodeEnvironmentPlugin() {
			return require("webpack/lib/node/NodeEnvironmentPlugin");
		},
		get NodeSourcePlugin() {
			return require("webpack/lib/node/NodeSourcePlugin");
		},
		get NodeTargetPlugin() {
			return require("webpack/lib/node/NodeTargetPlugin");
		},
		get NodeTemplatePlugin() {
			return require("webpack/lib/node/NodeTemplatePlugin");
		},
		get ReadFileCompileWasmPlugin() {
			return require("webpack/lib/node/ReadFileCompileWasmPlugin");
		}
	},

	electron: {
		get ElectronTargetPlugin() {
			return require("webpack/lib/electron/ElectronTargetPlugin");
		}
	},

	wasm: {
		get AsyncWebAssemblyModulesPlugin() {
			return require("webpack/lib/wasm-async/AsyncWebAssemblyModulesPlugin");
		}
	},

	library: {
		get AbstractLibraryPlugin() {
			return require("webpack/lib/library/AbstractLibraryPlugin");
		},
		get EnableLibraryPlugin() {
			return require("webpack/lib/library/EnableLibraryPlugin");
		}
	},

	container: {
		get ContainerPlugin() {
			return require("webpack/lib/container/ContainerPlugin");
		},
		get ContainerReferencePlugin() {
			return require("webpack/lib/container/ContainerReferencePlugin");
		},
		get ModuleFederationPlugin() {
			return require("webpack/lib/container/ModuleFederationPlugin");
		},
		get scope() {
			return require("webpack/lib/container/options").scope;
		}
	},

	sharing: {
		get ConsumeSharedPlugin() {
			return require("webpack/lib/sharing/ConsumeSharedPlugin");
		},
		get ProvideSharedPlugin() {
			return require("webpack/lib/sharing/ProvideSharedPlugin");
		},
		get SharePlugin() {
			return require("webpack/lib/sharing/SharePlugin");
		},
		get scope() {
			return require("webpack/lib/container/options").scope;
		}
	},

	debug: {
		get ProfilingPlugin() {
			return require("webpack/lib/debug/ProfilingPlugin");
		}
	},

	util: {
		get createHash() {
			return require("webpack/lib/util/createHash");
		},
		get comparators() {
			return require("webpack/lib/util/comparators");
		},
		get serialization() {
			return require("webpack/lib/util/serialization");
		},
		get cleverMerge() {
			return require("webpack/lib/util/cleverMerge").cachedCleverMerge;
		},
		get LazySet() {
			return require("webpack/lib/util/LazySet");
		}
	},

	get sources() {
		return require("webpack-sources");
	},

	experiments: {
		schemes: {
			get HttpUriPlugin() {
				return require("webpack/lib/schemes/HttpUriPlugin");
			},
			get HttpsUriPlugin() {
				return require("webpack/lib/schemes/HttpsUriPlugin");
			}
		}
	}
});
